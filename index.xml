<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lei Zhilong</title><link>https://leizhilong.github.io/</link><description>Recent content on Lei Zhilong</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 04 Jun 2021 18:05:29 +0800</lastBuildDate><atom:link href="https://leizhilong.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Gitbook</title><link>https://leizhilong.github.io/cheatsheet/gitbook/</link><pubDate>Fri, 04 Jun 2021 18:05:29 +0800</pubDate><guid>https://leizhilong.github.io/cheatsheet/gitbook/</guid><description>I. Installation 1. The Mismatched graceful-fs dependency Since gitbook has been abandoned for quite a long time, it&amp;rsquo;s a mess to install gitbook from scratch for someone who has to keep using it. The most common problem that they would definitely face is the mismatched graceful-fs dependency. When you clone some gitbook from github, the first thing to do is to install gitbook dependencies.
1 2 3 4 gitbook install # or just try to display gitbook version gitbook -V With no doubt, graceful-fs would be the one reported causing a problem.</description></item><item><title>Linux</title><link>https://leizhilong.github.io/cheatsheet/linux/</link><pubDate>Thu, 30 Jul 2020 18:05:29 +0800</pubDate><guid>https://leizhilong.github.io/cheatsheet/linux/</guid><description>I. Shell 1. Use Map in Bash Shell 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 blockAWhile() { NW_HOST=$1 NW_IP=$2 NW_INTERFACE=$3 # do some functions # .... } declare -A hostMap=( \ [&amp;#34;vm-1&amp;#34;]=&amp;#34;192.168.192.1&amp;#34; \ [&amp;#34;vm-2&amp;#34;]=&amp;#34;192.168.192.2&amp;#34; \ [&amp;#34;vm-3&amp;#34;]=&amp;#34;192.168.193.231&amp;#34; \ [&amp;#34;vm-4&amp;#34;]=&amp;#34;192.168.194.117&amp;#34; \ ) declare -A interfaceMap=( \ [&amp;#34;vm-1&amp;#34;]=&amp;#34;eth-081e4af4-62&amp;#34; \ [&amp;#34;vm-2&amp;#34;]=&amp;#34;eth-86680b51-5e&amp;#34; \ [&amp;#34;vm-3&amp;#34;]=&amp;#34;eth-9c111949-08&amp;#34; \ [&amp;#34;vm-4&amp;#34;]=&amp;#34;eth-21fb0d9b-fd&amp;#34; \ ) for eachHost in ${!</description></item><item><title>Git</title><link>https://leizhilong.github.io/cheatsheet/git/</link><pubDate>Mon, 20 Jul 2020 18:05:29 +0800</pubDate><guid>https://leizhilong.github.io/cheatsheet/git/</guid><description>I. Git Submodule 1. Delete a submodule 1 2 3 4 5 6 7 8 9 10 11 git submodule deinit {MOD_PATH} # delete mod info from .gitmodules cat .gitmodules | gre -v {MOD_PATH} &amp;gt; .gitmodules # use --cached to clear info in .git/modules git rm --cached {MOD_PATH} git commit -am &amp;#34;Remove a submodule.&amp;#34; 2. Modify submodule URL 1 2 3 4 5 6 7 8 9 10 11 # 1.</description></item><item><title>Docker</title><link>https://leizhilong.github.io/cheatsheet/docker/</link><pubDate>Thu, 04 Jun 2020 18:05:29 +0800</pubDate><guid>https://leizhilong.github.io/cheatsheet/docker/</guid><description>I. Installation 1. Debug Docker desktop for macOS log in terminal To get Docker desktop for macOS log, try this
1 2 3 4 5 pred=&amp;#39;process matches &amp;#34;.*(ocker|vpnkit).*&amp;#34; || (process in {&amp;#34;taskgated-helper&amp;#34;, &amp;#34;launchservicesd&amp;#34;, &amp;#34;kernel&amp;#34;} &amp;amp;&amp;amp; eventMessage contains[c] &amp;#34;docker&amp;#34;)&amp;#39; /usr/bin/log stream --style syslog --level=debug --color=always --predicate &amp;#34;$pred&amp;#34; II. Usage 1. Container does not respond to Ctrl + C Cause
The problem is that Ctrl-C sends a signal to the top-level process inside the container, but that process doesn&amp;rsquo;t necessarily react as you would expect.</description></item><item><title>Golang</title><link>https://leizhilong.github.io/cheatsheet/golang/</link><pubDate>Thu, 04 Jun 2020 18:05:29 +0800</pubDate><guid>https://leizhilong.github.io/cheatsheet/golang/</guid><description>I. Struct 1. Ommit empty struct in `json.Marshal()' Suppose we have a nested struct like:
1 2 3 4 5 6 7 8 9 10 type Example struct { Info string `json:&amp;#34;info,omitempty&amp;#34;` ExampleValues struct { DayOfMonth int `json:&amp;#34;dayOfMonth,omitempty&amp;#34;` DateStr string `json:&amp;#34;dateStr,omitempty&amp;#34;` SomeRandomFloat float64 `json:&amp;#34;someRandomFloat,omitempty&amp;#34;` StrArray []string `json:&amp;#34;strArray,omitempty&amp;#34;` IsWorking bool `json:&amp;#34;isWorking,omitempty&amp;#34;` } `json:&amp;#34;exampleValues,omitempty&amp;#34;` } And if only info filed is assinged with a value when initialized.
1 2 b, _ := json.</description></item><item><title>Kubernetes</title><link>https://leizhilong.github.io/cheatsheet/kubernetes/</link><pubDate>Thu, 04 Jun 2020 18:05:29 +0800</pubDate><guid>https://leizhilong.github.io/cheatsheet/kubernetes/</guid><description>I. Kubernetes YAML tips Here are 3 ways to create Kubernetes YAML templates without writing from scratch.
1. Using dryrun to generate YAML 1 2 3 kubectl create deployment nginx-deploy --image=nginx -o yaml --dry-run 2. Getting existing workload YAML 1 2 3 kubectl get deploy nginx-deploy -o yaml &amp;gt; nginx-deploy.yaml 3. Explaining spec by kubectl 1 2 3 kubectl explain pods.spec.containers</description></item><item><title>Rust</title><link>https://leizhilong.github.io/cheatsheet/rust/</link><pubDate>Thu, 04 Jun 2020 18:05:29 +0800</pubDate><guid>https://leizhilong.github.io/cheatsheet/rust/</guid><description>I. Building Debugging with backtrace 1 RUST_BACKTRACE=1 cargo run II. Grammar use unwarp and expect to handle Result&amp;lt;T&amp;gt; 1 let f = File::open(&amp;#34;hello.txt&amp;#34;).unwrap(); Instead of using match explictly to handle Result&amp;lt;T&amp;gt;, unwrap will return T on OK or call panic() for us on Err
1 let f = File::open(&amp;#34;hello.txt&amp;#34;).expect(&amp;#34;Fail to open file hello.txt&amp;#34;); More conveniently, rust provides us with expect that not only act the same as unwrap in Result&amp;lt;T&amp;gt; handling but also allow us to customize error message.</description></item><item><title>Why Swap should be disabled on Kubernetes</title><link>https://leizhilong.github.io/post/why-swap-should-be-disabled-on-kubernetes/</link><pubDate>Sun, 10 May 2020 10:54:17 +0800</pubDate><guid>https://leizhilong.github.io/post/why-swap-should-be-disabled-on-kubernetes/</guid><description>Issue Description Since Kubernetes 1.8, a kubelet flag fail-swap-on has been set to a default value true, which means that swap is not supported by default on Kubernetes. SWAP is used on Unix and Linux by default since they were born. People are astonished to learn that swap has to be disabled on Kubernetes which is supposed to be able to facilitate the full ablity of Linux system. There are several issues on Github talking about this change since 1.</description></item><item><title>Case Study: Swapoff Cannot Allocate Memory</title><link>https://leizhilong.github.io/post/case-study-swapoff-cannot-allocate-memory/</link><pubDate>Mon, 12 Nov 2018 10:44:52 +0800</pubDate><guid>https://leizhilong.github.io/post/case-study-swapoff-cannot-allocate-memory/</guid><description>Description On some of our CentOS Linux nodes, we use Zabbix to monitor host resources. Sometimes, Zabbix reports system swap space high usage when the used size is larger then 50% of its total space, which indicates there may not be sufficient RAM. After cleaning up some unused tasks, available memory reaches up to 90GB+ according to the result of free -h command while the total swap space is only 10GB.</description></item><item><title>K8s Reliability doc from kubespray</title><link>https://leizhilong.github.io/post/k8s-reliability/</link><pubDate>Thu, 06 Sep 2018 14:06:54 +0800</pubDate><guid>https://leizhilong.github.io/post/k8s-reliability/</guid><description>Overview Distributed system such as Kubernetes are designed to be resilient to the failures. More details about Kubernetes High-Availability (HA) may be found at Building High-Availability Clusters
To have a simple view the most of parts of HA will be skipped to describe Kubelet&amp;lt;-&amp;gt;Controller Manager communication only.
By default the normal behavior looks like:
Kubelet updates it status to apiserver periodically, as specified by --node-status-update-frequency. The default value is 10s.</description></item><item><title>gVisor VS Kata Container</title><link>https://leizhilong.github.io/post/gvisor-vs-kata/</link><pubDate>Tue, 04 Sep 2018 18:00:31 +0800</pubDate><guid>https://leizhilong.github.io/post/gvisor-vs-kata/</guid><description>Kata Container Full Kernel Lets system calls go through freely Performance penalty due to the VM layer. Not clear yet how slower or faster than gVisor On paper, slower startup time. Can run in nested virtualized environments if the hypervisor and hardware support it. gVisor Partial Kernel Intercepts syscalls Performance penalty at runtime due to syscall filtering. Not clear how slower or faster than Kata yet. On paper, faster startup time.</description></item><item><title>First Post Using Hugo</title><link>https://leizhilong.github.io/post/my-first-post/</link><pubDate>Wed, 29 Aug 2018 17:38:11 +0800</pubDate><guid>https://leizhilong.github.io/post/my-first-post/</guid><description>Hello Hugo I have changed my blog to a hugo site and this is my first post using hugo.
Hugo Introduction Hugo is a fast and modern static site generator written in Go, and I use it to build my blog. Here are some steps to build your own blog pages with Github Pages and Hugo, and it&amp;rsquo;s fast and all free.
Create two projects on Github Blog source, assuming github.</description></item><item><title>About</title><link>https://leizhilong.github.io/about/</link><pubDate>Tue, 29 Aug 2017 18:05:29 +0800</pubDate><guid>https://leizhilong.github.io/about/</guid><description>å›§ Just some kind of nerd/geek/tech guy&amp;hellip;</description></item><item><title>License</title><link>https://leizhilong.github.io/license/</link><pubDate>Tue, 29 Aug 2017 18:05:29 +0800</pubDate><guid>https://leizhilong.github.io/license/</guid><description>Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
This is a human-readable summary of (and not a substitute for) the license. Disclaimer.
You are free to: Share â€” copy and redistribute the material in any medium or format Adapt â€” remix, transform, and build upon the material The licensor cannot revoke these freedoms as long as you follow the license terms.</description></item><item><title>Hexo Test Drive</title><link>https://leizhilong.github.io/post/hexo-test-drive/</link><pubDate>Wed, 26 Apr 2017 21:46:19 +0000</pubDate><guid>https://leizhilong.github.io/post/hexo-test-drive/</guid><description>Introduction Hexo is an alternative of jekyll to create static blog pages from markdown on Github Pages. Implemented with nodejs, Hexo is quite easy to use compared with jekyll. Using Hexo and a theme named &amp;ldquo;NexT&amp;rdquo;, I am here now to demonstrate how to create a pretty nice blog site on Github Pages within just a few minutes.
Prerequisites To begin with, you&amp;rsquo;ll need:
node git a github account Step By Step 1.</description></item></channel></rss>